// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetProductCategoriesData, GetProductCategoriesResponses, CreateProductCategoryData, CreateProductCategoryResponses, GetProductsData, GetProductsResponses, CreateProductData, CreateProductResponses, ShowProductData, ShowProductResponses, ShowProductErrors, UpdateProductData, UpdateProductResponses, ShowUserData, ShowUserResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get all product categories
 * This can only be done by the logged in user.
 */
export const getProductCategories = <ThrowOnError extends boolean = false>(options?: Options<GetProductCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProductCategoriesResponses, unknown, ThrowOnError>({
        url: '/product-categories',
        ...options
    });
};

/**
 * create product
 * This can only be done by the logged in user.
 */
export const createProductCategory = <ThrowOnError extends boolean = false>(options: Options<CreateProductCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProductCategoryResponses, unknown, ThrowOnError>({
        url: '/product-categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all products
 * This can only be done by the logged in user.
 */
export const getProducts = <ThrowOnError extends boolean = false>(options?: Options<GetProductsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProductsResponses, unknown, ThrowOnError>({
        url: '/products',
        ...options
    });
};

/**
 * create product
 * This can only be done by the logged in user.
 */
export const createProduct = <ThrowOnError extends boolean = false>(options: Options<CreateProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProductResponses, unknown, ThrowOnError>({
        url: '/products',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Find product by ID
 * Returns a single product
 */
export const showProduct = <ThrowOnError extends boolean = false>(options: Options<ShowProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowProductResponses, ShowProductErrors, ThrowOnError>({
        url: '/products/{productId}',
        ...options
    });
};

/**
 * update product
 * This can only be done by the logged in user.
 */
export const updateProduct = <ThrowOnError extends boolean = false>(options: Options<UpdateProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProductResponses, unknown, ThrowOnError>({
        url: '/products/{productId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * show user
 * This can only be done by the logged in user.
 */
export const showUser = <ThrowOnError extends boolean = false>(options?: Options<ShowUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ShowUserResponses, unknown, ThrowOnError>({
        url: '/user',
        ...options
    });
};